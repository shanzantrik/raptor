{"ast":null,"code":"import _slicedToArray from \"/Users/ZantrikTechnologies/Desktop/raxxx/raptor/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useReducer } from 'react';\n/**\n * Returns a function that triggers a component update. the hook equivalent to\n * `this.forceUpdate()` in a class component. In most cases using a state value directly\n * is preferable but may be required in some advanced usages of refs for interop or\n * when direct DOM manipulation is required.\n *\n * ```ts\n * const forceUpdate = useForceUpdate();\n *\n * const updateOnClick = useCallback(() => {\n *  forceUpdate()\n * }, [forceUpdate])\n *\n * return <button type=\"button\" onClick={updateOnClick}>Hi there</button>\n * ```\n */\n\nexport default function useForceUpdate() {\n  // The toggling state value is designed to defeat React optimizations for skipping\n  // updates when they are strictly equal to the last state value\n  const _useReducer = useReducer(state => !state, false),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        dispatch = _useReducer2[1];\n\n  return dispatch;\n}","map":{"version":3,"sources":["/Users/ZantrikTechnologies/Desktop/raxxx/raptor/template/node_modules/@restart/hooks/esm/useForceUpdate.js"],"names":["useReducer","useForceUpdate","state","dispatch"],"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA;;;;;;;;;;;;;;;;;AAgBA,eAAe,SAASC,cAAT,GAA0B;AACvC;AACA;AAFuC,sBAGlBD,UAAU,CAACE,KAAK,IAAI,CAACA,KAAX,EAAkB,KAAlB,CAHQ;AAAA;AAAA,QAG9BC,QAH8B;;AAIvC,SAAOA,QAAP;AACD","sourcesContent":["import { useReducer } from 'react';\n\n/**\n * Returns a function that triggers a component update. the hook equivalent to\n * `this.forceUpdate()` in a class component. In most cases using a state value directly\n * is preferable but may be required in some advanced usages of refs for interop or\n * when direct DOM manipulation is required.\n *\n * ```ts\n * const forceUpdate = useForceUpdate();\n *\n * const updateOnClick = useCallback(() => {\n *  forceUpdate()\n * }, [forceUpdate])\n *\n * return <button type=\"button\" onClick={updateOnClick}>Hi there</button>\n * ```\n */\nexport default function useForceUpdate() {\n  // The toggling state value is designed to defeat React optimizations for skipping\n  // updates when they are strictly equal to the last state value\n  const [, dispatch] = useReducer(state => !state, false);\n  return dispatch;\n}"]},"metadata":{},"sourceType":"module"}