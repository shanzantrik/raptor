{"ast":null,"code":"'use strict';\n\nvar bind = require('function-bind');\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar setFunctionLength = require('set-function-length');\n\nvar $TypeError = require('es-errors/type');\n\nvar $apply = GetIntrinsic('%Function.prototype.apply%');\nvar $call = GetIntrinsic('%Function.prototype.call%');\nvar $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);\n\nvar $defineProperty = require('es-define-property');\n\nvar $max = GetIntrinsic('%Math.max%');\n\nmodule.exports = function callBind(originalFunction) {\n  if (typeof originalFunction !== 'function') {\n    throw new $TypeError('a function is required');\n  }\n\n  var func = $reflectApply(bind, $call, arguments);\n  return setFunctionLength(func, 1 + $max(0, originalFunction.length - (arguments.length - 1)), true);\n};\n\nvar applyBind = function applyBind() {\n  return $reflectApply(bind, $apply, arguments);\n};\n\nif ($defineProperty) {\n  $defineProperty(module.exports, 'apply', {\n    value: applyBind\n  });\n} else {\n  module.exports.apply = applyBind;\n}","map":{"version":3,"sources":["/Users/ZantrikTechnologies/Desktop/raxxx/raptor/template/node_modules/call-bind/index.js"],"names":["bind","require","GetIntrinsic","setFunctionLength","$TypeError","$apply","$call","$reflectApply","call","$defineProperty","$max","module","exports","callBind","originalFunction","func","arguments","length","applyBind","value","apply"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,eAAD,CAAlB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,qBAAD,CAA/B;;AAEA,IAAIG,UAAU,GAAGH,OAAO,CAAC,gBAAD,CAAxB;;AACA,IAAII,MAAM,GAAGH,YAAY,CAAC,4BAAD,CAAzB;AACA,IAAII,KAAK,GAAGJ,YAAY,CAAC,2BAAD,CAAxB;AACA,IAAIK,aAAa,GAAGL,YAAY,CAAC,iBAAD,EAAoB,IAApB,CAAZ,IAAyCF,IAAI,CAACQ,IAAL,CAAUF,KAAV,EAAiBD,MAAjB,CAA7D;;AAEA,IAAII,eAAe,GAAGR,OAAO,CAAC,oBAAD,CAA7B;;AACA,IAAIS,IAAI,GAAGR,YAAY,CAAC,YAAD,CAAvB;;AAEAS,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,gBAAlB,EAAoC;AACpD,MAAI,OAAOA,gBAAP,KAA4B,UAAhC,EAA4C;AAC3C,UAAM,IAAIV,UAAJ,CAAe,wBAAf,CAAN;AACA;;AACD,MAAIW,IAAI,GAAGR,aAAa,CAACP,IAAD,EAAOM,KAAP,EAAcU,SAAd,CAAxB;AACA,SAAOb,iBAAiB,CACvBY,IADuB,EAEvB,IAAIL,IAAI,CAAC,CAAD,EAAII,gBAAgB,CAACG,MAAjB,IAA2BD,SAAS,CAACC,MAAV,GAAmB,CAA9C,CAAJ,CAFe,EAGvB,IAHuB,CAAxB;AAKA,CAVD;;AAYA,IAAIC,SAAS,GAAG,SAASA,SAAT,GAAqB;AACpC,SAAOX,aAAa,CAACP,IAAD,EAAOK,MAAP,EAAeW,SAAf,CAApB;AACA,CAFD;;AAIA,IAAIP,eAAJ,EAAqB;AACpBA,EAAAA,eAAe,CAACE,MAAM,CAACC,OAAR,EAAiB,OAAjB,EAA0B;AAAEO,IAAAA,KAAK,EAAED;AAAT,GAA1B,CAAf;AACA,CAFD,MAEO;AACNP,EAAAA,MAAM,CAACC,OAAP,CAAeQ,KAAf,GAAuBF,SAAvB;AACA","sourcesContent":["'use strict';\n\nvar bind = require('function-bind');\nvar GetIntrinsic = require('get-intrinsic');\nvar setFunctionLength = require('set-function-length');\n\nvar $TypeError = require('es-errors/type');\nvar $apply = GetIntrinsic('%Function.prototype.apply%');\nvar $call = GetIntrinsic('%Function.prototype.call%');\nvar $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);\n\nvar $defineProperty = require('es-define-property');\nvar $max = GetIntrinsic('%Math.max%');\n\nmodule.exports = function callBind(originalFunction) {\n\tif (typeof originalFunction !== 'function') {\n\t\tthrow new $TypeError('a function is required');\n\t}\n\tvar func = $reflectApply(bind, $call, arguments);\n\treturn setFunctionLength(\n\t\tfunc,\n\t\t1 + $max(0, originalFunction.length - (arguments.length - 1)),\n\t\ttrue\n\t);\n};\n\nvar applyBind = function applyBind() {\n\treturn $reflectApply(bind, $apply, arguments);\n};\n\nif ($defineProperty) {\n\t$defineProperty(module.exports, 'apply', { value: applyBind });\n} else {\n\tmodule.exports.apply = applyBind;\n}\n"]},"metadata":{},"sourceType":"script"}